// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	model "github.com/Xanvial/fare-app/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockFareUsecase is a mock of FareUsecase interface.
type MockFareUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFareUsecaseMockRecorder
}

// MockFareUsecaseMockRecorder is the mock recorder for MockFareUsecase.
type MockFareUsecaseMockRecorder struct {
	mock *MockFareUsecase
}

// NewMockFareUsecase creates a new mock instance.
func NewMockFareUsecase(ctrl *gomock.Controller) *MockFareUsecase {
	mock := &MockFareUsecase{ctrl: ctrl}
	mock.recorder = &MockFareUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFareUsecase) EXPECT() *MockFareUsecaseMockRecorder {
	return m.recorder
}

// CalculateFare mocks base method.
func (m *MockFareUsecase) CalculateFare() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateFare")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateFare indicates an expected call of CalculateFare.
func (mr *MockFareUsecaseMockRecorder) CalculateFare() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateFare", reflect.TypeOf((*MockFareUsecase)(nil).CalculateFare))
}

// GetDataCount mocks base method.
func (m *MockFareUsecase) GetDataCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetDataCount indicates an expected call of GetDataCount.
func (mr *MockFareUsecaseMockRecorder) GetDataCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCount", reflect.TypeOf((*MockFareUsecase)(nil).GetDataCount))
}

// GetLatestData mocks base method.
func (m *MockFareUsecase) GetLatestData() model.FareData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestData")
	ret0, _ := ret[0].(model.FareData)
	return ret0
}

// GetLatestData indicates an expected call of GetLatestData.
func (mr *MockFareUsecaseMockRecorder) GetLatestData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestData", reflect.TypeOf((*MockFareUsecase)(nil).GetLatestData))
}

// GetMinDataCount mocks base method.
func (m *MockFareUsecase) GetMinDataCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinDataCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMinDataCount indicates an expected call of GetMinDataCount.
func (mr *MockFareUsecaseMockRecorder) GetMinDataCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinDataCount", reflect.TypeOf((*MockFareUsecase)(nil).GetMinDataCount))
}

// IsDataValid mocks base method.
func (m *MockFareUsecase) IsDataValid() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDataValid")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDataValid indicates an expected call of IsDataValid.
func (mr *MockFareUsecaseMockRecorder) IsDataValid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDataValid", reflect.TypeOf((*MockFareUsecase)(nil).IsDataValid))
}

// ResetFareData mocks base method.
func (m *MockFareUsecase) ResetFareData() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetFareData")
}

// ResetFareData indicates an expected call of ResetFareData.
func (mr *MockFareUsecaseMockRecorder) ResetFareData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetFareData", reflect.TypeOf((*MockFareUsecase)(nil).ResetFareData))
}

// SetFareData mocks base method.
func (m *MockFareUsecase) SetFareData(input model.FareData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetFareData", input)
}

// SetFareData indicates an expected call of SetFareData.
func (mr *MockFareUsecaseMockRecorder) SetFareData(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFareData", reflect.TypeOf((*MockFareUsecase)(nil).SetFareData), input)
}

// ValidateFareData mocks base method.
func (m *MockFareUsecase) ValidateFareData(input model.FareData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateFareData", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateFareData indicates an expected call of ValidateFareData.
func (mr *MockFareUsecaseMockRecorder) ValidateFareData(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateFareData", reflect.TypeOf((*MockFareUsecase)(nil).ValidateFareData), input)
}
